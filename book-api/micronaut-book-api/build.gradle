buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.hibernate:hibernate-gradle-plugin:5.4.6.Final"
    }
}

plugins {
    id "com.github.johnrengelman.shadow" version "5.0.0"
    id "application"
    id "net.ltgt.apt-eclipse" version "0.21"
}

apply plugin: 'org.hibernate.orm'

version "1.0.0"
group "com.mycompany.micronautbookapi"

repositories {
    mavenCentral()
    maven { url "https://jcenter.bintray.com" }
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly
}

ext {
    set('micronautVersion', '1.2.3')
    set('micronautDataVersion', '1.0.0.M3')
    set('micronautHibernateJpaVersion', '1.2.1')
    set('lombokVersion', '1.18.8')
    set('orikaVersion', '1.5.4')
    set('logbackVersion', '1.2.3')
    set('mysqlConnectorVersion', '8.0.17')
}

dependencies {
    annotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "io.micronaut:micronaut-graal"
    annotationProcessor "io.micronaut:micronaut-inject-java"
    annotationProcessor "io.micronaut:micronaut-validation"
    annotationProcessor "io.micronaut.data:micronaut-data-processor:${micronautDataVersion}"
    compileOnly "com.oracle.substratevm:svm"
    implementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    implementation "io.micronaut:micronaut-management"
    implementation "io.micronaut.configuration:micronaut-micrometer-core"
    implementation "io.micronaut:micronaut-http-client"
    implementation "io.micronaut.configuration:micronaut-micrometer-registry-prometheus"
    implementation "io.micronaut.configuration:micronaut-jdbc-hikari"
    implementation "io.micronaut:micronaut-inject"
    implementation "io.micronaut:micronaut-validation"
    implementation "io.micronaut:micronaut-runtime"
    implementation "io.micronaut:micronaut-http-server-netty"
    implementation "io.micronaut.configuration:micronaut-hibernate-jpa:${micronautHibernateJpaVersion}", {
        exclude group:'io.micronaut.configuration', module:'micronaut-hibernate-jpa-spring'
    }
    implementation "io.micronaut.data:micronaut-data-hibernate-jpa:$micronautDataVersion", {
        exclude group:'io.micronaut.configuration', module:'micronaut-hibernate-jpa'
    }
    implementation "ma.glasnost.orika:orika-core:${orikaVersion}"
    runtimeOnly "ch.qos.logback:logback-classic:${logbackVersion}"
    runtimeOnly "mysql:mysql-connector-java:${mysqlConnectorVersion}"
    testAnnotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
    testAnnotationProcessor "io.micronaut:micronaut-inject-java"
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testImplementation "io.micronaut.test:micronaut-test-junit5"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
}

test.classpath += configurations.developmentOnly

mainClassName = "com.mycompany.micronautbookapi.Application"
// use JUnit 5 platform
test {
    useJUnitPlatform()
}

shadowJar {
    mergeServiceFiles()
}

hibernate {
    enhance {
        enableLazyInitialization= true
        enableDirtyTracking = true
        enableAssociationManagement = true
    }
}

run.classpath += configurations.developmentOnly
run.jvmArgs('-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.compilerArgs.add('-parameters')
}
